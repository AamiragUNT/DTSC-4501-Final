# AI-Student Performance and Fraud Detection System - Python Code

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LinearRegression
from sklearn.metrics import confusion_matrix, classification_report, mean_squared_error
from sklearn.feature_extraction.text import TfidfVectorizer
from wordcloud import WordCloud
import nltk
import re
import string

# Sample synthetic dataset creation (replace with real data)
data = pd.DataFrame({
    'GPA': np.random.uniform(2.0, 4.0, 100),
    'Assignment1': np.random.randint(50, 100, 100),
    'Assignment2': np.random.randint(50, 100, 100),
    'Essay': ["This is a sample essay content about AI in education."]*100,
    'Final_Grade': np.random.randint(50, 100, 100),
    'Plagiarism_Flag': np.random.choice([0, 1], 100, p=[0.8, 0.2])
})

# Preprocessing
features = ['GPA', 'Assignment1', 'Assignment2']
X = data[features]
y = data['Plagiarism_Flag']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest for fraud detection
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Linear Regression for grade prediction
lr = LinearRegression()
lr.fit(X_train, data['Final_Grade'][y_train.index])
y_pred_reg = lr.predict(X_test)
rmse = np.sqrt(mean_squared_error(data['Final_Grade'][y_test.index], y_pred_reg))
print(f"RMSE for Final Grade Prediction: {rmse:.2f}")

# Heatmap of feature correlation
plt.figure(figsize=(6, 4))
sns.heatmap(data[features + ['Final_Grade']].corr(), annot=True, cmap='coolwarm')
plt.title('Feature Correlation Heatmap')
plt.show()

# Time-series simulation (student performance trend)
data['Date'] = pd.date_range(start='2024-01-01', periods=100, freq='D')
data = data.sort_values('Date')
plt.figure(figsize=(10, 4))
plt.plot(data['Date'], data['Final_Grade'], label='Final Grade')
plt.title('Time-Series Plot of Student Final Grades')
plt.xlabel('Date')
plt.ylabel('Grade')
plt.legend()
plt.show()

# Word Cloud for Essay Content
text = ' '.join(data['Essay'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of Student Essays')
plt.show()

# Optional: Save model or figures
# rf.save('rf_model.pkl')
# plt.savefig('heatmap.png')
